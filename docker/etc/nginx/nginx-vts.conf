user  nginx;
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 8000;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    vhost_traffic_status_zone;

    # http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
    log_format json_combined escape=json '{"time_local":"$time_iso8601", '
        '"proxy_addr":"$remote_addr", '
        '"remote_addr":"$http_x_forwarded_for", '
        '"remote_user":"$remote_user", '
        '"request":"$request", '
        '"status":$status, '
        '"body_bytes_sent":$body_bytes_sent, '
        '"request_length":$request_length, '
        '"request_time":$request_time, '
        '"upstream_connect_time":"$upstream_connect_time", '
        '"upstream_header_time":"$upstream_header_time", '
        '"upstream_response_time":"$upstream_response_time", '
        '"http_referrer":"$http_referer", '
        '"http_user_agent":"$http_user_agent"}';

    log_format main_json escape=json '{'
        '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
        '"connection": "$connection", ' # connection serial number
        '"connection_requests": "$connection_requests", ' # number of requests made in connection
        '"pid": "$pid", ' # process pid
        '"request_id": "$request_id", ' # the unique request id
        '"request_length": "$request_length", ' # request length (including headers and body)
        '"remote_addr": "$remote_addr", ' # client IP
        '"remote_user": "$remote_user", ' # client HTTP username
        '"remote_port": "$remote_port", ' # client port
        '"time_local": "$time_local", '
        '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
        '"request": "$request", ' # full path no arguments if the request
        '"request_uri": "$request_uri", ' # full path and arguments if the request
        '"args": "$args", ' # args
        '"status": "$status", ' # response status code
        '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
        '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
        '"http_referer": "$http_referer", ' # HTTP referer
        '"http_user_agent": "$http_user_agent", ' # user agent
        '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
        '"http_host": "$http_host", ' # the request Host: header
        '"server_name": "$server_name", ' # the name of the vhost serving the request
        '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
        '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
        '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
        '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
        '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
        '"upstream_response_length": "$upstream_response_length", ' # upstream response length
        '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
        '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
        '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
        '"scheme": "$scheme", ' # http or https
        '"request_method": "$request_method", ' # request method
        '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
        '"pipe": "$pipe", ' # “p” if request was pipelined, “.” otherwise
        '"gzip_ratio": "$gzip_ratio", '
        '"http_cf_ray": "$http_cf_ray"'
      '}';

    access_log /dev/stdout main_json;
    error_log /dev/stderr info;

    # Copy data between file descriptors within the kernel
    # Faster then read() + write()
    sendfile        on;
    # Send all headers at once
    tcp_nopush      on;
    # Don't buffer data when sending. Good for small data bursts in real time
    tcp_nodelay     on;
    # Hide all server version information
    server_tokens off;

    keepalive_timeout  65;

    gzip  on;
    gzip_comp_level    5;
    gzip_min_length    256;
    gzip_disable msie6;
    gzip_types all;

    # Allow the server to close connection on non responding client. This will free up memory
    reset_timedout_connection on;

    include /etc/nginx/conf.d/*.conf;

    server {
        listen 11050;
        server_name nginx_vts_status;
        access_log off;

        location /status {
            vhost_traffic_status_bypass_limit on;
            vhost_traffic_status_bypass_stats on;
            vhost_traffic_status_display;
            vhost_traffic_status_display_format json;
        }

        location /basic_status {
            stub_status;
        }

        ws_log /var/log/nginx/ws_access.log;
        ws_log_format open "$time_local: Connection opened";
        ws_log_format close "$time_local: Connection closed";
        # ws_log_format escape=json '{'
        #     '"ws_time_local": "$time_local", '
        #     '"ws_opcode": "$ws_opcode", ' # websocket packet opcode. Look into https://tools.ietf.org/html/rfc6455 Section 5.2, Base Framing Protocol.
        #     '"ws_payload_size": "$ws_payload_size", ' # Websocket packet size without protocol specific data. Only data that been sent or received by the client
        #     '"ws_packet_source": "$ws_packet_source", ' # Could be "client" if packet has been sent by the user or "upstream" if it has been received from the server
        #     '"ws_conn_age": "$ws_conn_age", ' # Number of seconds connection is alive
        #     '"ws_request": "$request", ' # Http reqeust string. Usual looks like "GET /uri HTTP/1.1"
        #     '"ws_uri": "$uri", ' # Http request uri.
        #     '"ws_user": "$remote_user", ' # username if basic authentification is used
        #     '"ws_remote_addr": "$remote_addr", ' # Client's remote ip address
        #     '"ws_remote_port": "$remote_port", ' # Client's remote port
        #     '"ws_server_addr": "$server_addr", ' # Server's remote ip address
        #     '"ws_server_port": "$server_port", ' # Server's port
        #     '"ws_upstream_addr": "$upstream_addr"' # websocket backend address
        #   '}';

        location /ws_status {
            ws_stat;
        }
    }

}
