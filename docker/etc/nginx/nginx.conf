user  nginx;
worker_processes  auto;

error_log  /dev/stdout warn;
pid        /var/run/nginx.pid;

events {
  worker_connections 8000;

  multi_accept on;
  use epoll;
}

http {

include       /etc/nginx/mime.types;
default_type  application/octet-stream;

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

sendfile        on;
tcp_nopush      on;
tcp_nodelay     off;

keepalive_timeout  65;

gzip  on;
gzip_comp_level    5;
gzip_min_length    256;
gzip_types
  application/atom+xml
  application/javascript
  application/json
  application/rss+xml
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-web-app-manifest+json
  application/xhtml+xml
  application/xml
  font/opentype
  image/svg+xml
  image/x-icon
  text/css
  text/plain
  text/x-component;

client_max_body_size 20M;

# flattened config
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

upstream websocket {
    server localhost:8030;
}

upstream api {
    server localhost:8131;
}

server {
    listen       80 default_server;
    server_name  _;
    ws_log /dev/stdout;

    # ssl_certificate     /etc/nginx/certs/$ENV/cert.pem;
    # ssl_certificate_key /etc/nginx/certs/$ENV/cert.key;
    # ssl_protocols       TLSv1.1 TLSv1.2;
    # ssl_prefer_server_ciphers on;
    # ssl_ciphers         EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
    ## ssl_ciphers      HIGH:!aNULL:!MD5:EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    add_header Cache-Control no-store;

    location /health {
      default_type application/json;
      return 200 '{"status":"OK"}';
    }

    location /status {
      stub_status;
    }

    location /ws_status {
      ws_stat;
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri @rewrites;
    }

    location /api {
        access_log /dev/stdout;
        error_log /dev/stdout info;

        location /api/ws {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 1h;
        }

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        rewrite    /api/(.*) /$1 break;
        proxy_pass http://api;
        proxy_redirect off;
    }

    location @rewrites {
        rewrite ^/health$ /health.json last;
        rewrite ^(.+)$ /index.html last;
    }

}

}